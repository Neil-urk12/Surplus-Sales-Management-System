// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accessories": {
            "get": {
                "description": "Get a list of all accessories, with optional filtering.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accessories"
                ],
                "summary": "Get all accessories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by make",
                        "name": "make",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by unit color",
                        "name": "unit_color",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "General search term",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of accessories",
                        "schema": {
                            "$ref": "#/definitions/handlers.AccessoriesListResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve accessories",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new accessory to the inventory.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accessories"
                ],
                "summary": "Create a new accessory",
                "parameters": [
                    {
                        "description": "Accessory object to create",
                        "name": "accessory_input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NewAccessoryInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Accessory created successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON format or failed to parse request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Missing required fields or validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create accessory or failed to retrieve details after creation",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accessories/{id}": {
            "get": {
                "description": "Get a single accessory by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accessories"
                ],
                "summary": "Get accessory by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Accessory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved accessory",
                        "schema": {
                            "$ref": "#/definitions/models.Accessory"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format. ID must be an integer.",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Accessory not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve accessory",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing accessory by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accessories"
                ],
                "summary": "Update an existing accessory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Accessory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Accessory object with updated fields",
                        "name": "accessory_update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateAccessoryInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Accessory updated successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format or invalid JSON format/parsing error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Accessory not found for update",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update accessory",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an accessory by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accessories"
                ],
                "summary": "Delete an accessory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Accessory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Accessory deleted successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid ID format. ID must be an integer.",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Accessory not found for deletion",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete accessory",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cabs": {
            "get": {
                "description": "Get a list of all cabs, with optional filtering by make, status, unit color, or a general search term.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cabs"
                ],
                "summary": "Get all cabs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by make (e.g., Toyota)",
                        "name": "make",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (e.g., Available, Maintenance)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by unit color (e.g., Red)",
                        "name": "unit_color",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "General search term for various fields",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of cabs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.MultiCab"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve cabs",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new cab to the inventory.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cabs"
                ],
                "summary": "Add a new cab",
                "parameters": [
                    {
                        "description": "Cab object to add. ID is auto-generated and should be omitted.",
                        "name": "cab",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MultiCab"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Cab added successfully",
                        "schema": {
                            "$ref": "#/definitions/models.MultiCab"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON format or failed to parse request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Missing required fields or validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to add new cab",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cabs/{id}": {
            "get": {
                "description": "Get a single cab by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cabs"
                ],
                "summary": "Get cab by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cab ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved cab",
                        "schema": {
                            "$ref": "#/definitions/models.MultiCab"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format. ID must be an integer.",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Cab not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve cab",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing cab by its ID. The ID in the path is authoritative.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cabs"
                ],
                "summary": "Update an existing cab",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cab ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Cab object with updated fields. ID in body is ignored.",
                        "name": "cab_update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MultiCab"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cab updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.MultiCab"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format or invalid JSON format/parsing error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Cab not found for update",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update cab",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a cab by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cabs"
                ],
                "summary": "Delete a cab",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cab ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Cab deleted successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid ID format. ID must be an integer.",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Cab not found for deletion",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete cab",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/materials": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of materials, with optional filtering.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Materials"
                ],
                "summary": "Get all materials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search term for material name or description",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by supplier",
                        "name": "supplier",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (e.g., In Stock, Low Stock)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of materials",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Material"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve materials",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Adds a new material to the inventory.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Materials"
                ],
                "summary": "Create a new material",
                "parameters": [
                    {
                        "description": "Material object to create",
                        "name": "material",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Material"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Material created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Material"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create material",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/materials/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a single material by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Materials"
                ],
                "summary": "Get material by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Material ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved material",
                        "schema": {
                            "$ref": "#/definitions/models.Material"
                        }
                    },
                    "400": {
                        "description": "Invalid Material ID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Material not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve material",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing material by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Materials"
                ],
                "summary": "Update an existing material",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Material ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Material object with updated fields",
                        "name": "material",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Material"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Material updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Material"
                        }
                    },
                    "204": {
                        "description": "Material updated, but fetch failed (No Content)"
                    },
                    "400": {
                        "description": "Invalid Material ID format or invalid request payload or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update material",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a material by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Materials"
                ],
                "summary": "Delete a material",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Material ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Material deleted successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid Material ID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete material",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all registered users. This is a protected route.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of users",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserListResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve users",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows Admin or Staff to create a new user account. This is a protected route.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create user (Admin/Staff)",
                "parameters": [
                    {
                        "description": "User Creation Information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserActionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing fields",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already in use",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failed to create user",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Authenticates a user and returns a JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Log in an existing user",
                "parameters": [
                    {
                        "description": "User Login Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserAuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing fields",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Account is inactive",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Creates a new user account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User Registration Information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserAuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing fields",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already in use",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a single user by their ID. This is a protected route.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/handlers.SingleUserResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a user's full name, email, role, or active status. This is a protected route (Admin/Staff only).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User Update Information",
                        "name": "user_update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserActionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update user",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a user by their ID. This is a protected route.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/activate": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Activates a previously deactivated user account. This is a protected route.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Activate user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User activated successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to activate user",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/deactivate": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deactivates an active user account. This is a protected route.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Deactivate user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deactivated successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to deactivate user",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/password": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the password for a given user. This is a protected route.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Password Update Information",
                        "name": "password_update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserPasswordUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing fields",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update password",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.AccessoriesListResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Accessory"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "handlers.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.SingleUserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "handlers.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Changed to interface{} to be more generic"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "handlers.UserActionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "handlers.UserAuthResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "handlers.UserListResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "models.Accessory": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Timestamp of creation",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier",
                    "type": "integer"
                },
                "image": {
                    "description": "URL or base64 string of the image",
                    "type": "string"
                },
                "make": {
                    "description": "Manufacturer/brand of the accessory",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.AccessoryMake"
                        }
                    ]
                },
                "name": {
                    "description": "Name of the accessory",
                    "type": "string"
                },
                "price": {
                    "description": "Price in PHP",
                    "type": "number"
                },
                "quantity": {
                    "description": "Number of units available",
                    "type": "integer"
                },
                "status": {
                    "description": "Inventory status",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.AccessoryStatus"
                        }
                    ]
                },
                "unit_color": {
                    "description": "Color of the accessory",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.AccessoryColor"
                        }
                    ]
                },
                "updatedAt": {
                    "description": "Timestamp of last update",
                    "type": "string"
                }
            }
        },
        "models.AccessoryColor": {
            "type": "string",
            "enum": [
                "Black",
                "White",
                "Silver",
                "Chrome",
                "Custom"
            ],
            "x-enum-varnames": [
                "ColorBlack",
                "ColorWhite",
                "ColorSilver",
                "ColorChrome",
                "ColorCustom"
            ]
        },
        "models.AccessoryMake": {
            "type": "string",
            "enum": [
                "Generic",
                "OEM",
                "Aftermarket",
                "Custom"
            ],
            "x-enum-varnames": [
                "MakeGeneric",
                "MakeOEM",
                "MakeAftermarket",
                "MakeCustom"
            ]
        },
        "models.AccessoryStatus": {
            "type": "string",
            "enum": [
                "In Stock",
                "Low Stock",
                "Out of Stock",
                "Available"
            ],
            "x-enum-varnames": [
                "StatusInStock",
                "StatusLowStock",
                "StatusOutOfStock",
                "StatusAvailable"
            ]
        },
        "models.Material": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "supplier": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.MultiCab": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Timestamp of creation",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier",
                    "type": "integer"
                },
                "image": {
                    "description": "URL or base64 string of the image",
                    "type": "string"
                },
                "make": {
                    "description": "Manufacturer (e.g., Mazda)",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the cab model (e.g., RX-7)",
                    "type": "string"
                },
                "price": {
                    "description": "Price in PHP",
                    "type": "number"
                },
                "quantity": {
                    "description": "Number of units available",
                    "type": "integer"
                },
                "status": {
                    "description": "Inventory status (e.g., In Stock, Low Stock)",
                    "type": "string"
                },
                "unit_color": {
                    "description": "Color of the cab unit",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "Timestamp of last update",
                    "type": "string"
                }
            }
        },
        "models.NewAccessoryInput": {
            "type": "object",
            "required": [
                "make",
                "name",
                "price",
                "quantity",
                "unit_color"
            ],
            "properties": {
                "image": {
                    "type": "string"
                },
                "make": {
                    "$ref": "#/definitions/models.AccessoryMake"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number",
                    "minimum": 0
                },
                "quantity": {
                    "type": "integer",
                    "minimum": 0
                },
                "unit_color": {
                    "$ref": "#/definitions/models.AccessoryColor"
                }
            }
        },
        "models.UpdateAccessoryInput": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "make": {
                    "$ref": "#/definitions/models.AccessoryMake"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number",
                    "minimum": 0
                },
                "quantity": {
                    "type": "integer",
                    "minimum": 0
                },
                "unit_color": {
                    "$ref": "#/definitions/models.AccessoryColor"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "role": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.UserCreateRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "fullName": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "securepassword123"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "staff",
                        "admin"
                    ],
                    "example": "staff"
                }
            }
        },
        "models.UserLoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "securepassword123"
                }
            }
        },
        "models.UserPasswordUpdateRequest": {
            "type": "object",
            "properties": {
                "newPassword": {
                    "type": "string",
                    "example": "newsecurepassword123"
                }
            }
        },
        "models.UserUpdateRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johnathan.doe@example.com"
                },
                "fullName": {
                    "type": "string",
                    "example": "Johnathan Doe"
                },
                "isActive": {
                    "description": "Using pointer to distinguish between false and not provided",
                    "type": "boolean"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "staff",
                        "admin"
                    ],
                    "example": "admin"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Cortes Surplus Inventory Management API",
	Description:      "This is the API for the Cortes Surplus Inventory Management System.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
